Data Structures Week 3 HW - Noah Weiner

2.1
From largest to smallest growth rate, by making a python chart:

x^3
2^x
x^2log(x)
2^(x/2)
x^2
log(x)^2
log(x^2)
x^1.5
log(x)
x*log(log(x))
x
sqrt(x)
2/x

2.2
a. True
b. False
c. True
d. True

2.3
NlogN (charted using python)

2.7

a.
  1. O(n)
  2. O(n^2)
  3. O(n^3)
  4. O(n^2)
  5. O(n^4)
  6. O(n^4)

b. The output from runtime.c:

N		| 1			| 2			| 3			| 4			| 5			| 6		
4		| 0.000001	| 0.000001	| 0.000002	| 0.000001	| 0.000002	| 0.000001	
16		| 0.000001	| 0.000002	| 0.000020	| 0.000002	| 0.000357	| 0.000041	
64		| 0.000002	| 0.000020	| 0.001178	| 0.000012	| 0.172570	| 0.003717	
256		| 0.000001	| 0.000130	| 0.032772	| 0.000078	| 181.430256| 0.903110	

c. For functions 1-4, they all seem to display orders of magnitude in runtime that correspond to their respective big-O degrees.  5 and 6 deviate quite a bit in runtime, but since big-O represents a worst-case scenario that isn't unexpected.

2.14
a. In this case a = [2, 1, 0, 8, 4] and n=5. The steps for x=3 are:
  1. 3 * 0 + 4 = 4
  2. 3 * 4 + 8 = 20
  3. 3 * 20 + 0 = 60
  4. 3 * 60 + 1 = 181
  5. 3 * 181 + 2 = 545

b. Because the any polynomial a0 + a1*x + a2*x^2 + ... + an*x^n can be rewritten as a0 + x(a1 + x(a2 + ... + x(an-1 + an*x)))

c. O(n)

2.15

algorithm where a = element list, x = element to search for, N = size of a:

low = 0
high = N

while low <= high:
	mid = (low + high) / 2
	if a[mid] < x:
		low = mid + 1
	else if a[mid] > x:
		high = mid - 1
	else
		return true
return false

Running time: O(log(n))

2.26
a. When there are no equal elements in the array

b. The last element in A is added to B

c. O(log(n))

d. By using Moore's voting algorithm, which assigns the first element as the majority element and iterates over the array, incrementing a counter if the element matches the majority element and decrementing if it doesn't. If the counter is reduced to 0, the next element is set to the majority element.

e.

algorithm where a = element list, N = size of a:

count = 0
for (i = 0; i < N; i++):
	if count == 0:
		majorityElement = a[i]
	if majorityElement == a[i]:
		count++
	else
		count--

count = 0
for (i = 0; i < N; i++):
	if a[i] == majorityElement:
		count++

if count > N/2:
	return count
else:
	return NO_MAJORITY


2.28
a. The best solution is to set both j and i to the maximum value

j = 0

for (i = 0; i < N; i++):
	if a[i] > a[j]:
		j = i

return a[j] * 2

b.

j = 0
for (x = 0; x < N; x++):
	if a[x] > a[j]:
		j = x

i = 0
for (x = 0; x < j; x++):
	if a[x] < a[i]:
		i = x

return a[j] - a[i]

c.

j = 0

for (i = 0; i < N; i++):
	if a[i] > a[j]:
		j = i

return a[j] * a[j]

d.

j = 0
for (x = 0; x < N; x++):
	if a[x] > a[j]:
		j = x

i = 0
for (x = 0; x < j; x++):
	if a[x] < a[i]:
		i = x

return a[j] / a[i]


2.31
No, because it could possibly get stuck in an infinite loop with an even number of elements.
